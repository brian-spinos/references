//--------------------------------------------------------------------------------

https://github.com/treehouse/cheatsheets

- git submodules
 

Git log --oneline

Git add -u

Git add -am

Git squash

//--------------------------------------------------------------------------------
rebase

Gco feature and make changes
Gco master and pull
Gco feature
$ Git rebase master 
# could have conflicts
$ git add file
$ git rebase  --continue

https://youtu.be/f1wnYdLEpgI


//--------------------------------------------------------------------------------

git notes


conflicts


// but its better to fix locally if complex...
github - can fix merge conflicts -- diff (if same line changes)

hello
<<<<<<< feature/branch2
this is also a change from b2
=======
this is a change from b1
>>>>>>> main



aaa

- to fix conflicts locally:
$ git fetch --all && git merge origin/main  # local main branch would still be behind



$ git fetch --all # updates all remote branches in my local ??? I am 90% sure

=============


$ git branch # diplay local branches
$ git branch -r # diplay remote branches
$ git branch --all # display all branches

=============

updating a feature branch without pulling from main:
- you can still do it, but there will be merge conflicts in github, for you to fix

- and if you merge main into your old feature branch, and push and try to do a PR to main:
    - if there is no code diff, github will let you know :) and there is no need to merge the PR :) 
=============

if the changes happen in diff lines (maybe a close line might not be the case)
- then there is no conflicts in GITHUB !!!

=============
conflicts happen when 
you have an open PR, but
someone else merges their PRs before you, 
and are updating the same lines of code 

-- what to do now?

git fetch --all && git merge origin/main   

# and fix the conflict locally

# OR:  $ git reset --hard HEAD  # to blow away merge conflicts






=============

if you push to an old feature branch, you will need to create the PR manually in github, 
github will not display the new PRs on the top of the github page for you

=============


Ahh, nice one. I thought 
git fetch 
would update the master branch even if I am currently on a different one. Turns out it does not
// !!! SEEMS THE ABOVE INFO IS WRONG !!!

You can do git 
fetch --all
, but this only fetches the branches, it doesn't pull them.
// !!! SEEMS THE ABOVE INFO IS WRONG !!!


// works! 
 git fetch --all && git merge origin/main


=============

$ git merge main   # Already up to date.
$ git merge origin main   # Already up to date.
$ git merge origin/main   # Already up to date.



//--------------------------------------------------------------------------------

// Remove changes from 1 file
$ git checkout HEAD -- ./file.txt 







// Add changes from another branch to 1 file
#
# $ git fetch --all
# $ git checkout <other-branch-name> -- ./path/to/your/folder
#
$ git fetch --all # to update my origin/main branch (this is needed)
$ git checkout origin/main -- ./file.txt
# this causes a change to the file, so you would need to `git add` it








Move fast from a wip branch to another branch, and back

diff branches:
feature/foo
origin/feature/foo



Rebase, issues?


How to handle complex merges: its a risk



Git checkout a specific commit:
$ git checkout <commit-sha>
# dettached head state here
# to go back:
$ git checkout <branch-name>





HEAD is a pointer to a commit


The branch name point to the latest commit in that branch ??? Not sure



//-------------------------------------------------------------------------------- 
rebase: I am not confident about this:


// Fetch the latest changes from main:
// git fetch origin main



// rebase:  (complicated) // make sure you create a backup branch !!!
$ git rebase main
// multiple times:
fix merge conflicts, git add
git rebase --continue
// then git commit, and git push


//--------------------------------------------------------------------------------

main is not automatically synched up with origin/main 
-- you would have to manually checkout main branch and do a git pull



$ git fetch --all # this does not update main branch 


git fetch origin main   # this will not update main branch 
-- you would have to checkout main branch and do a git pull
-- does it update origin/main ???  I think it does,I am 90% sure



=======

#
# Remember, a pull is a fetch and a merge.
#
git pull origin main  # merge conflict can occur  # it will (try) to merge into your current branch 




//--------------------------------------------------------------------------------


$ git log -2 # 2 most recent commits 

//--------------------------------------------------------------------------------


Remove changes from 1 file

Add changes from another branch to 1 file


Move fast from a wip branch to another branch, and back

diff branches:
feature/foo
origin/feature/foo



Rebase, issues?


How to handle complex merges: its a risk


Git checkout a specific commit:
$ git checkout <commit-sha>
# dettached head state here
# to go back:
$ git checkout <branch-name>


HEAD is a pointer to a commit


The branch name point to the latest commit in that branch ??? Not sure

//--------------------------------------------------------------------------------

# create a branch based on an existing branch:
$ git checkout -b my-feature master

# checkout remote branch
$ ...


# Find lost commits
$ ...


# undo a commit reset?



git diff —staged # diff of added files compared to HEAD

git reset HEAD foo.txt # remove file from index/staging 

git checkout — foo.txt # blow away changes, make it like the file in HEAD

git reset —soft HEAD^ # if you regret a commit, it undoes the commit, brings back files to staging! Nice

//--------------------------------------------------------------------------------