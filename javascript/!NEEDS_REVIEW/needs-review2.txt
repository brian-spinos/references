

//----------------------------------------------------------------------------------------------

// ================= ASYNC
// async means a fn returns a promise
// await works ONLY inside async functions


const foo = async () => { 
	let x = null
	try{
		x = await bar()
	} catch(error){
		console.log(error)
	}

	return 123 // returns a resolved promise !!!
}

//----------

let getUsers = async () => {
	let p = new Promise((res,rej) => {
		res("hey")
		// rej("ERROR")
	})

	return p
}

getUsers()
    .then((data) => {
    	console.log(data)
    })
    .catch((err) => {
    	console.log(err)
    })



//----------------------------------------------------------------------------------------------


// Promise
let promise = new Promise((resolve, reject) => {
    resolve(data)
    // reject(error)
})


promise
    .then((data) => {
        console.log(data)
    })
    .catch((error) => {
        console.log(error.message)
    })


/////


new Promise(fnRR) .then .catch 

Promise.resolve(data)
Promise.reject(error)
//----------------------------------------------------------------------------------------------
// hoisting

// move declarations to top of scope (script or fn)

// "=" is not hoisted


//----------------------------------------------------------------------------------------------

// ts - get month and year
// from epoch  and string

ts = new Date()  // Thu Jul 14 2022 21:20:58 GMT-0700 (Mountain Standard Time)
ts.getFullYear() // 2022
ts.getMonth()    // 6    -- it is ZERO BASED, so just add 1.

ts2 = +new Date() // 1657858889972

x = new Date(1657858889972)
x.getFullYear() // 2022
x.getMonth()  // 6    -- it is ZERO BASED, so just add 1.

y = new Date("Thu Jul 14 2022 21:20:58 GMT-0700 (Mountain Standard Time)")
y.getFullYear() // 2022
y.getMonth()  // 6    -- it is ZERO BASED, so just add 1.


new Date("Fri Feb 14 2009") // Sat Feb 14 2009 00:00:00 GMT-0700 (Mountain Standard Time)

//----------------------------------------------------------------------------------------------

// coins


// vac 

// values [1,2,3,4,5]

// ammount: 7

// coin count

// a  a-v + 1



// GOTCHA:   ammount + 1
// dp[0] = 0
// if(v <= a)
// return -1;

const getMinCoinCountForChange = (ammount, coinValues) => {
    const dp = Array(ammount + 1);
    dp.fill(999,0,ammount + 1);
    dp[0] = 0;

    for(let a=1;a<(ammount + 1);a++){
        coinValues.forEach(v => {
            // if(v <= a) console.log(`dp[${a}] = Math.min(dp[${a}], dp[${a - v}] + 1);`);
            if(v <= a) dp[a] = Math.min(dp[a], dp[a - v] + 1);
        });
    }

    // console.log(dp);
    if(dp[ammount] === 999) return -1;
    return dp[ammount]; 

}


getMinCoinCountForChange(7, [1,3,4,5]); // 2

//----------------------------------------------------------------------------------------------
