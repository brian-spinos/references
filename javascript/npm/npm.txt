

// npm notes 


1. Initializing a new project:
   - `npm init`: Interactively creates a new `package.json` file.
   - `npm init -y`: Generates a default `package.json` file without any prompts.

2. Installing packages:
   - `npm install <package>`: Installs a package locally.
   - `npm install <package> --save`: Installs and adds the package as a dependency in `package.json`.
   - `npm install <package> --global`: Installs a package globally.
   - `npm install`: Installs all dependencies listed in `package.json`.

3. Uninstalling packages:
   - `npm uninstall <package>`: Uninstalls a package locally.
   - `npm uninstall <package> --save`: Uninstalls a package and removes it from `package.json`.
   - `npm uninstall <package> --global`: Uninstalls a globally installed package.

4. Updating packages:
   - `npm update`: Updates packages to their latest versions.
   - `npm update <package>`: Updates a specific package to the latest version.

5. Running scripts:
   - `npm run <script>`: Runs a script defined in `package.json`.
   - `npm test`: Runs the test script defined in `package.json`.

6. Publishing packages:
   - `npm publish`: Publishes a package to the npm registry.

7. Versioning:
   - `npm version <version>`: Updates the package version in `package.json` and creates a new git commit and tag.
   - `npm version <version> --no-git-tag-version`: Updates the package version in `package.json` without creating a git tag.

8. Listing packages:
   - `npm ls`: Lists installed packages in the current project.
   - `npm ls <package>`: Lists information about a specific package.

9. Cleaning the cache:
   - `npm cache clean`: Clears the npm cache.

10. Managing npm configuration:
    - `npm config set <key> <value>`: Sets an npm configuration key to the specified value.
    - `npm config get <key>`: Retrieves the value of a specific npm configuration key.
    - `npm config delete <key>`: Deletes an npm configuration key.


11. To update a package to a specific version using npm update, you can provide the package name and the desired version number. Here's the syntax:
   - `$ npm update <package>@<version>`
   - `$ npm update lodash@4.17.11`