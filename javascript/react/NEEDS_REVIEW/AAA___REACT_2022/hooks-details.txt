HOOKS


https://reactjs.org/docs/hooks-reference.html


HOC - a function that takes a component and return an enhanced component

side effects - changes something outside of the scope of the function

 lazy loading - run code when required

 function ID is stable -- same ID for function, does not change ??? 

 memoization - re-renders only if there's a change in the props

----------------------------------------------------------------------------- useState

--> so func components can have STATE !!!

const [state, setState] = useState({name: "brian"});

setState(newState); -- enqueues a re-render of the component.


setState(prevState => prevState + 1)

If your update function returns the exact same value as the current state, the subsequent rerender will be skipped completely.


const [state, setState] = useState({});
setState(prevState => {
  // Object.assign would also work
  return {...prevState, ...updatedValues};
});

// Lazy loading, only on initial render
const [state, setState] = useState(() => {
  const initialState = someExpensiveComputation(props);
  return initialState;
});


----------------------------------------------------------------------------- useEffect

--> so func components can have LIFECYLE !!!


useEffect(fn, [dependencies])

 fire the effect after every completed render

By default, effects run after every completed render, but you can choose to fire them only when certain values have changed.


subscription or timer ID and event handlers - cleanup

useEffect(() => {
  const subscription = props.source.subscribe();
  return () => {
    // Clean up the subscription
    subscription.unsubscribe();
  };
});


 the function passed to useEffect fires after layout and paint

  it’s guaranteed to fire before any new renders.

  usually you’ll want to declare functions needed by an effect inside of it. - because they could reference old props and state

  The empty set of dependencies, [], means that the effect will only run once when the component mounts

  If you want to run an effect and clean it up only once (on mount and unmount), 
  you can pass an empty array ([]) as a second argument

----------------------------------------------------------------------------- useContext



const value = useContext(MyContext)


React.createContext

prop of the nearest <MyContext.Provider>



this Hook will trigger a rerender



A component calling useContext will always re-render when the context value changes
 If re-rendering the component is expensive, you can optimize it by using memoization.


----------------------------------------------------------------------------- useReducer


const [state, dispatch] = useReducer(reducer, initialState);
const [state, dispatch] = useReducer(reducer, initialArg, init); // init(initialArg) to return initialState


reducer = (state, action) => newState

dispatch({type: 'increment'})



An alternative to useState.


useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values
or when the next state depends on the previous one.

useReducer also lets you optimize performance for components that trigger deep updates 
because you can pass dispatch down instead of callbacks.


React guarantees that dispatch function identity is stable and won’t change on re-renders. 
This is why it’s safe to omit from the useEffect or useCallback dependency list.



Lazy initialization -- 3rd parameter !!!
You can also create the initial state lazily. To do this, you can pass an init function as the third argument. The initial state will be set to init(initialArg).



It lets you extract the logic for calculating the initial state outside the reducer. 
This is also handy for resetting the state later in response to an action:



If you return the same value from a Reducer Hook as the current state, 
React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)



----------------------------------------------------------------------------- useCallback


const memoizedCallback = useCallback(
  () => { doSomething(a, b) },
  [a, b]
);




This is useful when passing callbacks to optimized child components 
that rely on reference equality 
to prevent unnecessary renders 



useCallback(fn, deps) is equivalent to useMemo(() => fn, deps).



every value referenced inside the callback should also appear in the dependencies array.



----------------------------------------------------------------------------- useMemo


const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);





----------------------------------------------------------------------------- useRef


const refContainer = useRef(initialValue);



useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).
The returned object will persist for the full lifetime of the component.



A common use case is to access a child imperatively:

const inputEl = useRef(null);
<input ref={inputEl} type="text" />
inputEl.current.focus();




useRef is like a “box” that can hold a mutable value in its .current property.



It’s handy for keeping any mutable value around similar to how you’d use instance fields in classes.

useRef will give you the same ref object on every render.
    - Mutating the .current property doesn’t cause a re-render.
    - there is a workaround though, in the docs of useRef !!!




// Maybe ??? 
const latestProps = useRef(props);
latestProps.current = props;




----------------------------------------------------------------------------- useImperativeHandle

useImperativeHandle(ref, createHandle, [deps])


1. (props, ref)
2. child useRef()
3. fnRO
4. return 
5. forwardRef




function FancyInput(props, ref) {
  const inputRef = useRef();
  useImperativeHandle(ref, () => ({
    focus: () => {
      inputRef.current.focus();
    }
  }));
  return <input ref={inputRef} ... />;
}

FancyInput = forwardRef(FancyInput);

In this example, a parent component that renders 
<FancyInput ref={inputRef} />
would be able to call inputRef.current.focus().



useImperativeHandle customizes the instance value that is exposed to parent components when using ref. 
// should be avoided in most cases. 






----------------------------------------------------------------------------- useLayoutEffect



DOM mutations          ->       useLayoutEffect         ->      browser paint


- Prefer useEffect 
  when possible to avoid blocking visual updates.


useLayoutEffect. 

It has the same signature as useEffect, 
and only differs in WHEN it is fired.

- it fires synchronously after all DOM mutations.
  and  before the browser has a chance to paint.
Use this to read layout from the DOM and synchronously re-render







server rendering
    neither useLayoutEffect nor useEffect can run until the JavaScript is downloaded. 
    This is why React warns when a server-rendered component contains useLayoutEffect. 
    To fix this, either move that logic to useEffect (if it isn’t necessary for the first render), 
    or delay showing that component until after the client renders (if the HTML looks broken until useLayoutEffect runs).

To exclude a component that needs layout effects from the server-rendered HTML, render it conditionally with showChild && <Child /> and defer showing it with useEffect(() => { setShowChild(true); }, []). This way, the UI doesn’t appear broken before hydration.





----------------------------------------------------------------------------- useDebugValue


useDebugValue(value)

- use inside custom hooks

useFriendStatus(friendID)  // e.g. "FriendStatus: Online"



useDebugValue can be used to display a label 
for custom hooks in React DevTools.




-- second argument: (lazy load, for expensive operations)
    This function is only called if the Hooks are inspected. It receives the debug value as a parameter and should return a formatted display value.

EX:
    useDebugValue(date, date => date.toDateString());




----------------------------------------------------------------------------- custom hooks
- wrapper for react hooks, with custom logic

function useFriendStatus(friendID) {
  const [isOnline, setIsOnline] = useState(null);

  // ...

  return isOnline;
}












