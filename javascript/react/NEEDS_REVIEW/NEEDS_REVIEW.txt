// https://teamtreehouse.com/tracks/learn-react



({prop1, prop2})


this.func.bind(this)


// arrow functions automatically bind to the scope they are defined
onClick={() => this.func()} // where func is a normal class method (not an arrow method)



{items.map( item => 
    <div key={item.id.toString()}> {/* react docs ask for a key as a string */}
        <p>Hello</p>
    </div>
)}



// "key" error in browser logs

// see this text --> check the render method of `MyComponent`. See <url>




// - react dev tools, I can search for a component
//     - we can see the props and state of the component
//     - we can change the state on the spot




// STATE
//   - two types of state: app state and component state



// delete item in array:  arr.filter(x => x.id !== id)



// npx: downloads a CLI and runs the command at the same time, always using the lattest version of the CLI, example:
// $ npx create-react-app my-app


// react scripts
When you create a project with Create React App, it installs the latest version of React and React-DOM, 
as well as the latest version of react-scripts, a development dependency that manages all other 
dev dependencies that run, test and build your app.



// import react in all jsx files


// const Foo = () => {}
// export default Foo; // this should work



// .map((foo, index) => {...})


// synthetic event: react wraps the event for cross-browser compatibility -- its the normal:   const func = (e) => {}



this.setState(prevState => {...});


//----------------------------------------------------------------------------------------------------------------------------------------------------
// When And Why To Centralise State In A UI App
// Logic Room - Learn UI Architecture
https://www.youtube.com/watch?v=3l7lbLyFIrA
https://www.youtube.com/channel/UC-XpO_JZJI75PtL8MNchszA


//----------------------------------------------------------------------------------------------------------------------------------------------------

react class, hooks
jest, testing
redux
router


------------------------------------------------


jest.fn(() => {...})
jest.mockImplementationOnce(fn) mockReturnValueOnce()//
m.mock.calls[0][0]
m.mock.results[0].value

jest.mock('axios')
axios.get.mockImplementation(() => Promise.resolve(123)) // mockReturnValueOnce

expect(1).toBe(1)
foo toEqual bar 
toBeGreaterThanOrEqual
less 
toHaveBeenCalledWith()

axios.get.mockResolvedValue()


jest.spyOn(global, "fetch").mockImplementation()

------------------------------------------------

CoSEMRCaRlID  28


const CTX = createContext({})

// <CTX.Provider value={data}>
//   <Foo />
// </CTX.Provider>


let val = useCOntext(CTX)

------------------------------------------------

const [foo,setFoo] = useState(() => {
	adsdh(props)
})


------------------------------------------------
// lifecycle

useEffect(() => {

	callAPI()

	returh () => {
		doSOmething()
	}
}, [a,b])

------------------------------------------------

// only first time, or when a b is updated
const val = useMemo(() => {
	return aaa(a,b);
}, [a,b])





------------------------------------------------
// for complex state

useReducer(red, is)
useReducer(red, data, initFn)



const [state, dispatch] = useReducer(red, is)


const reducer = (state, action) => {
	switch(action.type){
		case: 'AAA':
		    return {...state, ...obj, aaa: action.payload}
		default:
		    throw new Error('whoops')
	}
}



{
	users: [
		'aaa',
		'bbb'
	]
}



let initFn = (data) => {

	return initState

}

------------------------------------------------

useRef()



let btn = useRef(null)


btn.current.click()

let r = useRef(123)


r.current = 456

------------------------------------------------
setTimeout(() => {}, 1000) clearTimeout
setInterval fn 1000 clearInterval(id )

------------------------------------------------

CoSEMRCaRlID  28



const fn = useCallback(() => {
	aaa(a,b)
}, [a,b])


Foo = React.memo(Foo)

------------------------------------------------

// layout x paint
useLayoutEffect(() => {})

------------------------------------------------

useImperativeHandle()




Foo = (props, ref) => {
	let innerRef = useRef()

	useImperativeHandle(ref, () => ({
		focus: () => {
			innerRef.current.focus()
		}
	}))



	return <button ref={innerRef} />
}

React.forwardRef(Foo)


------------------------------------------------

// inside custom hooks

useDebug('aaa')



------------------------------------------------


import {render, waitFor, fireEvent, screen} from '@testing-library/react'

------------------------------------------------
// redux 


import Provider from 'react-reduc'



// <Provider store={store}>
// </Provider>



const store = createStore(combineReducers({
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
	users: usersRed,
}))




const users = useSelector(s => s.users)
const dispatch = useDispatch()

dispatch({type: 'AAA', payload: data})



const mapStateToProps = (state, ownProps) => {
  return {
  	users: state.users,
  	users: state.users,
  	users: state.users,
  	users: state.users,
  	users: state.users,
  }
}



const mapDispatchToProps = (dispatch, ownProps) => {
	return {
		callAPI: (x) => dispatch({type: 'AAA'}, payload: x)
	}
}


export default connect(mapStateToProps, mapDispatchToProps)(Foo)
------------------------------------------------



------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------------------------------------

// react class, hooks
// jest, testing
// redux
// router


// ------------------------------------------------------------------------------------------------ jest



jest.fn(() => {});
.mockImplementationOnce()
.mockResolvedValue // promise
.mockReturnValue

expect()toBe, toEqual obj tbgrathanorEqual


jest.spyOn(global, "fetch").mockImplementation(() => Promise.resolve({
	json: Promise.resolve(data);
}))

jest.mock("axios")


axios.get.mockResolvedValue(data)





// ------------------------------------------------------------------------------------------------ test


import {render, waitFor, screen, fireEvent} from '@testing-library/react'

beforeEach(() => {
	jest.restoreAllMocks();
})

let comp = render(<Foo />)
comp.unmount()
comp.remount()
com.getByTestId('aaa'); // data-testid="aaa"


fireEvent.click(btn) // let btn = comp.getByTesId('aaa')


fireEvent.change(input, {target: {value: 'aaa'}})

// ------------------------------------------------------------------------------------------------ hooks




CoSEMRCaRLID





const MYCONTEXT = createContext(defaultVal)

let val = useCOntext(MYCONTEXT) // will trigger rerender when value change, u can use React.memo() for performance





let [foo,setFoo] = useState(() => {
	return myState(props) // complex - lazy load
})

// ------------------------------------------------------------------------------------------------





//----------------------------------------------------------------------------------------------------------------------------------------------------




https://axios-http.com/docs/post_example
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch



axios.post(url, {name: "brian"})
.then(response => {
	console.log(response)
}).catch(error => {
	console.log(error)
})




// fu (MHB) TJ TD C
fetch(url, {
	method: 'POST',
	headers: {
		'Content-Type': 'application/json'
	},
	body: JSON.stringify(data)
}).then(response => response.json())
.then(data => {
	console.log(data)
}).catch(error => {
	console.log(error)
})


//----------------------------------------------------------------------------------------------------------------------------------------------------


// ================= ASYNC
// async means a fn returns a promise
// await works ONLY inside async functions


const foo = async () => { 
	let x = null
	try{
		x = await bar()
	} catch(error){
		console.log(error)
	}

	return 123 // returns a resolved promise !!!
}

//----------

let getUsers = async () => {
	let p = new Promise((res,rej) => {
		res("hey")
		// rej("ERROR")
	})

	return p
}

getUsers()
    .then((data) => {
    	console.log(data)
    })
    .catch((err) => {
    	console.log(err)
    })




//----------------------------------------------------------------------------------------------------------------------------------------------------



// Promise
let promise = new Promise((resolve, reject) => {
    resolve(data)
    // reject(error)
})


promise
    .then((data) => {
        console.log(data)
    })
    .catch((error) => {
        console.log(error.message)
    })


/////


new Promise(fnRR) .then .catch 

Promise.resolve(data)
Promise.reject(error)

//----------------------------------------------------------------------------------------------------------------------------------------------------

// hoisting

move declarations to top of scope (script or fn)

// "=" is not hoisted

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

