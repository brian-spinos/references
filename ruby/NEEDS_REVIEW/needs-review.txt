//-------------------------------------------------------------------------------- TODO?

binding.pry

Ruby websocket server
Build a ruby socket server
Event machine on mac
Smpt for ruby and php
rails chat
Write ruby code that gets executed by js
Code chords so I can play with it! Ruby
Ruby music: https://github.com/sausheong/muse

//--------------------------------------------------------------------------------

Link to

https://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to


As suggested here<https://github.com/heartcombo/devise/issues/5439#issuecomment-997927041>, the following will suffice:

<%= link_to "Sign Out", destroy_user_session_path, data: { "turbo-method": :delete } %>





link_to "Profile", controller: "profiles", action: "show", id: @profile
# => <a href="/profiles/show/1">Profile</a>



<%= link_to(@profile) do %>
  <strong><%= @profile.name %></strong> -- <span>Check it out!</span>
<% end %>
# => <a href="/profiles/1">
       <strong>David</strong> -- <span>Check it out!</span>
     </a>



Articles", articles_path, id: "news", class: "article"
# => <a href="/articles" class="article" id="news">Articles</a>



link_to "Articles", { controller: "articles" }, id: "news", class: "article"
# => <a href="/articles" class="article" id="news">Articles</a>


%= link_to

<%= link_to "Delete Book", @book, method: "delete", { confirm: "Are you sure?", disable_with: "Processing..." } %>





<%= link_to "Delete Song", @book, method: "delete", { confirm: "Are you sure?", disable_with: "Processing..." } %>





<%= link_to "Click Here!", {:controller => "controller", :action => "action"}, {:title => "Example"} %>




{ data: { foo: "bar" } }



link_to “Contacts”, contacts_path, :data => {:foo => ‘bar’}






//--------------------------------------------------------------------------------
Ruby modules


module SuperPowers
  
  def self.included(base)
    
    #
    # Add class methods
    #
    base.extend(ClassMethods)
    
    #
    # Add instance methods
    #
    base.class_eval do

      def fly
      puts '(instance method called) flying'
      end

      def swim
      puts '(instance method called) swimming'
      end

    end
  end

  module ClassMethods
    def run
      puts '(class method called) running'
    end
    
    def fire
      puts '(class method called) firing'
    end
  end

end

class Person
  include SuperPowers
end

brian = Person.new

brian.fly 
brian.swim 

Person.run 
Person.fire 


#
# OUTPUT:
#
# (instance method called) flying
# (instance method called) swimming
# (class method called) running
# (class method called) firing
#

//--------------------------------------------------------------------------------

=============================================================================================
======================================= RAILS (START) =======================================
=============================================================================================

//-------------------------------------------------------------------------------- rails tasks

$ rails --tasks

rails assets:clean[keep]                 # Remove old compiled assets
rails assets:precompile                  # Compile all the assets named in config.assets.precompile


 $ rails --tasks
 $ rails db:reset

 $ rails stats 

 //-------------------------------------------------------------------------------- Rails assets precompile

 Rails assets precompile
 
 https://youtu.be/3hS-bC3KsoE
 
 Seems it compiles the assets in production
 Into the public/assets/ folder
 
 
   *   minifies/uglyfies/concatenates ?
 
 
   $ rails assets --help
   rails assets:clean[keep]
       Remove old compiled assets
   
   rails assets:clobber
       Remove compiled assets
   
   rails assets:environment
       Load asset compile environment
   
   rails assets:precompile
       Compile all the assets named in config.assets.precompile
 

 //-------------------------------------------------------------------------------- rails new

 // consider esbuild ? does it make ./bin/dev available? and can we avoid : rails assets:precompile  ???
 $ rails new blog -j esbuild --css bootstrap 

 //-------------------------------------------------------------------------------- Rails hotwire
 

// Rails hotwire !!!!
https://youtu.be/0CSGsHnci2I


//-------------------------------------------------------------------------------- Capybara is integrated with rails 7 ???
// https://www.hotrails.dev/turbo-rails/crud-controller-ruby-on-rails


bin/rails g system_test quotes


//-------------------------------------------------------------------------------- rails server

// rails server:
./bin/dev // rails 7.0.2.2 - uses forman


//-------------------------------------------------------------------------------- rails model 

scope :ordered, -> { order(id: :desc) }




migration:

bin/rails generate model LineItemDate quote:references date:date


Before run



class LineItemDate < ApplicationRecord
  belongs_to :quote

  validates :date, presence: true, uniqueness: { scope: :quote_id }

  scope :ordered, -> { order(date: :asc) }
end

//-------------------------------------------------------------------------------- view 

# <%= link_to "destroy", product, method: :delete, data: {confirm: 'Are you sure?'} %>

//-------------------------------------------------------------------------------- controller

//-------------------------------------------------------------------------------- sidekiq

Rails: $ bundle exec sidekiq -c 1

https://youtu.be/aaGSh38nzq8


//--------------------------------------------------------------------------------
Ruby code blocks

//--------------------------------------------------------------------------------

Rails migration data types

//-------------------------------------------------------------------------------- RAILS APP 
Oauth eith doorkeeper gem
Ec2 nohup
Email devise
Env variables
Action cable
Scale to mobile
Add forms
View details of test
Ab test, add visitor counter

//-------------------------------------------------------------------------------- rails ajax flow
Ajax flow

In the controller index, set variables, and do stuff

In the view, you have access to controller variables, have a form with remote: true, this form will now be submitted as ajax request, and it will go o the controller to the action it is sent to...

Back in the controller, in the other action, it will execute your action code, you can receive the params, you need a respond_to block with format.js and the controller will send you to the corresponding js view.


In the js view, you have access to variables from the controllers action, here you should update the page with new information!!!

$("<%= escape_javascript(render @user) %>").appendTo("#users");



escape_javascript: Escapes carriage returns and single and double quotes for JavaScript segments.


//--------------------------------------------------------------------------------
u = User.new(name: “Brian”, car: car)
u.save

u = User.create(name: “Brian”)

u = User.update(name: “Brian2”)

u.cars.build

=============================================================================================
=========================================== RAIL (END) ======================================
=============================================================================================
