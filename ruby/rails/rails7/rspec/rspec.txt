

// youtube
https://www.youtube.com/watch?v=71eKcNxwxVY


// github
https://github.com/rspec/rspec-rails


// docs - not sure about the docs yet 
https://relishapp.com/rspec/rspec-rails/docs
https://relishapp.com/rspec/rspec-rails/v/5-1/docs/matchers
https://relishapp.com/rspec/rspec-rails/v/5-1/docs/controller-specs

====================================================================================================

// Gemfile
group :development, :test do
   gem 'rspec-rails'


$ bundle install  # so we can have the rspec executable

$ rails generate rspec:install

====================================================================================================

// generate model test stuff
$ rails g rspec:model post           # model | controller | feature ???
      create  spec/models/post_spec.rb




RSpec.describe Post, type: :model do
  # pending "add some examples to (or delete) #{__FILE__}"

  context 'context A' do 

    let!(:params){  # variable `params`   # let! --> will run each time before each test
      {firstName: 'aaa', lastName: 'bbb'}
    }

    let(:params){  # variable `params`
      {firstName: 'aaa', lastName: 'bbb'}
    }

    before(:each) do 
        Post.new(params).save
        Post.new(params.merge({anotherField: 'ccc'})).save
    end

    it 'does something' do
        user = User.new(name: 'brian').save
        expect(user).to eq(false) # because it did not save
    end

    it 'does another thing' do
        expect(1 + 1).to eq(2)
        expect(User.foo).to eq(123)
    end
  end

  context 'context B' do 
    it 'does something' do
      expect(1 + 1).to eq(2)
    end
  end
end



====================================================================================================

$ rspec  # to run the tests



.rspec file 
--require spec_helper
--format documentation

====================================================================================================


$ rails g rspec:controller posts   # plural controller 



RSpec.describe "Posts", type: :request do
  describe "GET /index" do
    # pending "add some examples (or delete) #{__FILE__}"

    it 'aaaa' do 
      get :index 
      expect(response).to be_success # same as:  response.success?  # this is not a question, haha
      # response.success?
    end

    it 'bbbb' do 
      user = Post.create!({firstName: 'aaa'})  # .create! --> creates and saves the user 
      get :show, params: { id: user.to_params }
      expect(response).to be_success
    end
  end
end


====================================================================================================

$ rails stats  # for test coverage 
# you can also use the gem "SimpleCov"

====================================================================================================
